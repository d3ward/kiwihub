name: Validate and Auto-Close Empty Issues
on:
  issues:
    types:
      - opened

permissions:
  issues: write
  contents: read

jobs:
  validate-issue:
    runs-on: ubuntu-latest
    steps:
      - name: Check and Close Empty Issues
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            const issueNumber = issue.number;
            const issueTitle = issue.title;
            const issueBody = issue.body || '';
            
            let shouldClose = false;
            let reasons = [];
            
            // Check 1: Title still has template placeholder
            if (issueTitle.includes('[ NAME OF EXTENSION ]') || 
                issueTitle.includes('[ NAME OF ACTION ]')) {
              shouldClose = true;
              reasons.push('Issue title contains unchanged template placeholder');
            }
            
            // Check 2: Look for empty fields (nothing after the colon)
            const fieldsToCheck = [
              'Name :',
              'Description :',
              'Chrome Web Store URL',
              'Official Extension Website',
              'Extension category',
              'Action code'
            ];
            
            let emptyFields = [];
            for (const field of fieldsToCheck) {
              if (issueBody.includes(field)) {
                // Extract what comes after this field
                const regex = new RegExp(`${field}[^:]*:\\s*([^\\n]*)`, 'i');
                const match = issueBody.match(regex);
                
                if (match) {
                  const value = match[1].trim();
                  // Check if empty or contains only template helper text
                  if (value === '' || 
                      value === ':' ||
                      value.includes('optional if the extension') ||
                      value.includes('like security , productivity etc') ||
                      value.includes('use ``` at the beginning')) {
                    emptyFields.push(field.replace(' :', ''));
                  }
                }
              }
            }
            
            // If 3 or more fields are empty, close the issue
            if (emptyFields.length >= 3) {
              shouldClose = true;
              reasons.push(`${emptyFields.length} required fields are empty: ${emptyFields.join(', ')}`);
            }
            
            // Check 3: All checkboxes unchecked
            const uncheckedCount = (issueBody.match(/- \[ \]/g) || []).length;
            const checkedCount = (issueBody.match(/- \[x\]/gi) || []).length;
            
            if (uncheckedCount > 0 && checkedCount === 0) {
              shouldClose = true;
              reasons.push('All prerequisite checkboxes are unchecked');
            }
            
            // Close the issue if validation failed
            if (shouldClose) {
              // Post explanation comment
              const comment = `## ❌ Issue Automatically Closed - Incomplete Submission\n\n` +
                `Your issue has been automatically closed because it appears to be an unchanged or empty template.\n\n` +
                `**Reasons:**\n` +
                reasons.map(r => `- ${r}`).join('\n') +
                `\n\n` +
                `### To submit a valid issue:\n` +
                `1. Create a new issue\n` +
                `2. **Change the title** from \`[ NAME OF EXTENSION ]\` to the actual extension/action name\n` +
                `3. **Fill in all required fields** with actual information (not just leave them empty)\n` +
                `4. **Check the prerequisite boxes** to confirm you've tested the extension/action\n\n` +
                `Example of a properly filled field:\n` +
                `\`\`\`\n` +
                `Name : AdBlock Plus\n` +
                `Chrome Web Store URL : https://chrome.google.com/webstore/detail/adblock-plus/...\n` +
                `\`\`\`\n\n` +
                `Please create a new issue with complete information. Thank you!`;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: comment
              });
              
              // Add label
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                labels: ['invalid-template']
              });
              
              // Close the issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                state: 'closed',
                state_reason: 'not_planned'
              });
              
              console.log(`Closed issue #${issueNumber} - Template not filled`);
            } else {
              // Issue is valid, add validated label
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                labels: ['validated']
              });
              
              console.log(`Issue #${issueNumber} passed validation`);
            }
